# -*- coding: utf-8 -*-
"""
Created on Thu Jan 25 20:40:20 2024

@author: Owen Porpora
"""
import time
import RPi.GPIO as GPIO
from RpiMotorLib import RpiMotorLib

# Pin assignments
MOTOR_DIRECTION_PIN = 20  # DIR
MOTOR_STEP_PIN = 21  # STP
GPIO_pins = (14, 15, 18)  # Microstep Resolution MS1-MS3 -> GPIO Pin

def setup_gpio():
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(MOTOR_DIRECTION_PIN, GPIO.OUT)  # Direction
    GPIO.setup(MOTOR_STEP_PIN, GPIO.OUT)       # Step
    GPIO.setup(GPIO_pins[0], GPIO.OUT)         # MS1
    GPIO.setup(GPIO_pins[1], GPIO.OUT)         # MS2
    GPIO.setup(GPIO_pins[2], GPIO.OUT)         # MS3

def set_direction(direction):
    if direction == 'up':
        GPIO.output(MOTOR_DIRECTION_PIN, GPIO.LOW)   # Set to LOW for counterclockwise
    elif direction == 'down':
        GPIO.output(MOTOR_DIRECTION_PIN, GPIO.HIGH)  # Set to HIGH for clockwise
    else:
        print("Invalid direction. Please enter 'up' or 'down'.")
        return

def step_motor(direction_pin, step_pin, mode_pins, steps, step_delay=0.001, verbose=True, init_delay=0.05):
    motor = RpiMotorLib.A4988Nema(direction_pin, step_pin, mode_pins, "A4988")
    motor.motor_go(False, "Full", steps, step_delay, verbose, init_delay)

def cleanup_gpio():
    GPIO.cleanup()

def main():
    try:
        setup_gpio()

        direction = input("Enter direction (up/down): ").lower()
        set_direction(direction)
        
        # Smoother motion with smaller step delay and more steps
        step_motor(MOTOR_DIRECTION_PIN, MOTOR_STEP_PIN, GPIO_pins, 2000, 0.0002, False, 0.05)

    except KeyboardInterrupt:
        print("Program interrupted by the user.")
    finally:
        cleanup_gpio()

if __name__ == "__main__":
    main()
