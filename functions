"""
Created on Tue Nov 21 09:38:27 2023

@author: Owen Porpora
"""

import time
from adafruit_motor import stepper

# Placeholder values, replace with actual steps_per_unit and MotorKit instances
steps_per_unit_x = 100
steps_per_unit_y = 100
steps_per_unit_z = 50  # Replace with your actual steps_per_unit for Z-axis
hat_x = None  # Replace with your actual MotorKit instance for X-axis
hat_y = None  # Replace with your actual MotorKit instance for Y-axis
hat_z = None  # Replace with your actual MotorKit instance for Z-axis
dc_motor = None  # Replace with your actual DC motor instance

def move_z_axis_based_on_object(obj_type, stepper_z, target_height="home"):
    # Move Z-axis to varying heights based on object type or a specified target height
    if target_height == "home":
        # Move to the home position (lowest point)
        # Adjust the following values based on your specific setup
        direction_home = stepper.BACKWARD  # Adjust the direction based on your setup
        steps_to_home = 100  # Replace with the actual number of steps needed

        # Move the stepper motor to the home position
        stepper_z.onestep(style=stepper.DOUBLE, direction=direction_home, steps=steps_to_home)
    else:
        # Move to varying heights based on object type
        heights = {
            "house": 1,
            "road": 2,
            "city": 3,
            "settlement": 4,
            "number": 5,
            "robber": 6,
            "hexagon": 7
            # Add more heights as needed
        }

        if obj_type in heights:
            # Move to the specified height for the object type
            for _ in range(int(heights[obj_type] * steps_per_unit_z)):
                stepper_z.onestep(style=stepper.DOUBLE, direction=stepper.FORWARD)
        else:
            print("Invalid object type")


def move_to_coordinates(x, y, stepper_x, stepper_y):
    # Placeholder for moving gantry to coordinates logic
    # Replace this with your actual code
    steps_x = int(x * steps_per_unit_x)
    steps_y = int(y * steps_per_unit_y)

    direction_x = stepper.FORWARD if steps_x >= 0 else stepper.BACKWARD
    direction_y = stepper.FORWARD if steps_y >= 0 else stepper.BACKWARD

    stepper_x.onestep(style=stepper.DOUBLE, direction=direction_x)
    stepper_y.onestep(style=stepper.DOUBLE, direction=direction_y)

    time.sleep(0.1)  # Adjust the sleep time based on your requirements

def pick_up_hexagons(hexagon_locations, stepper_z, dc_motor):
    # Placeholder value, replace with your actual home position threshold
    hex_home_threshold = 5

    hexagons_in_home_1 = 0
    hexagons_in_home_2 = 0

    # Pick up hexagons one by one from the board
    for hexagon_location in hexagon_locations:
        move_to_coordinates(x=hexagon_location[0], y=hexagon_location[1], stepper_x=hat_x.stepper1, stepper_y=hat_y.stepper1)
        move_z_axis_based_on_object(obj_type="hexagon", stepper_z=hat_z.stepper1)
        dc_motor.throttle = 1.0
        time.sleep(3)
        dc_motor.throttle = 0.0

        # Move Z-axis to home position
        move_z_axis_based_on_object(obj_type="hexagon", stepper_z=hat_z.stepper1)

        # Determine hex home location based on the threshold
        hex_home_location = "hex_home_1" if hexagons_in_home_1 < hex_home_threshold else "hex_home_2"
        hexagons_in_home_1 += 1 if hex_home_location == "hex_home_1" else 0
        hexagons_in_home_2 += 1 if hex_home_location == "hex_home_2" else 0

        # Move to the determined hex home location
        place_objects_at_set_locations(obj_type="hexagon", set_location=hex_home_location, stepper_z=hat_z.stepper1, dc_motor=dc_motor)

        # Turn off the DC motor after placement
        dc_motor.throttle = 0.0


def pick_up_numbers(number_locations, stepper_z, dc_motor):
    # Placeholder value, replace with your actual home position threshold
    num_home_threshold = 5

    numbers_in_home_1 = 0
    numbers_in_home_2 = 0

    # Pick up numbers one by one from the board
    for number_location in number_locations:
        move_to_coordinates(x=number_location[0], y=number_location[1], stepper_x=hat_x.stepper1, stepper_y=hat_y.stepper1)
        move_z_axis_based_on_object(obj_type="number", stepper_z=hat_z.stepper1)
        dc_motor.throttle = 1.0
        time.sleep(3)
        dc_motor.throttle = 0.0

        # Move Z-axis to home position
        move_z_axis_based_on_object(obj_type="number", stepper_z=hat_z.stepper1)

        # Determine number home location based on the threshold
        num_home_location = "num_home_1" if numbers_in_home_1 < num_home_threshold else "num_home_2"
        numbers_in_home_1 += 1 if num_home_location == "num_home_1" else 0
        numbers_in_home_2 += 1 if num_home_location == "num_home_2" else 0

        # Move to the determined number home location
        place_objects_at_set_locations(obj_type="number", set_location=num_home_location, stepper_z=hat_z.stepper1, dc_motor=dc_motor)

        # Turn off the DC motor after placement
        dc_motor.throttle = 0.0
        

# Additional functions for moving to home locations
def move_to_home_location(color, obj_type, stepper_x, stepper_y):
    # Replace with the actual logic to move to the determined home location based on color and object type
    home_x = f"{color.lower()}_{obj_type}_home_x"
    home_y = f"{color.lower()}_{obj_type}_home_y"
    move_to_coordinates(x=home_x, y=home_y, stepper_x=stepper_x, stepper_y=stepper_y)
    

def pick_up_roads_by_color(road_x_locations_by_color, road_y_locations_by_color, z_pick, z_target, dc_motor):
    # Iterate over colors sequentially
    for color, road_x_locations, road_y_locations in zip(road_x_locations_by_color, road_y_locations_by_color):
        # Pick up roads of a specific color
        for road_x, road_y in zip(road_x_locations, road_y_locations):
            move_to_coordinates(x=road_x, y=road_y, stepper_x=hat_x.stepper1, stepper_y=hat_y.stepper1)

            # Move Z-axis to the specified pick height
            move_z_axis_based_on_object(obj_type="road", stepper_z=hat_z.stepper1, target_height=z_pick)

            dc_motor.throttle = 1.0
            time.sleep(3)

            # Move Z-axis to the target height
            move_z_axis_based_on_object(obj_type="road", stepper_z=hat_z.stepper1, target_height=z_target)

            # Move to the determined road home location based on color
            move_to_home_location(color, "road", stepper_x=hat_x.stepper1, stepper_y=hat_y.stepper1)

            # Move Z-axis to home building height
            move_z_axis_based_on_object(obj_type="road", stepper_z=hat_z.stepper1, target_height="home_building")

            # Turn off the DC motor after placement
            dc_motor.throttle = 0.0

            time.sleep(2)  # Wait for 2 seconds before the next iteration


def pick_up_settlements_by_color(settlement_x_locations_by_color, settlement_y_locations_by_color, z_pick, z_target, dc_motor):
    # Iterate over colors sequentially
    for color, settlement_x_locations, settlement_y_locations in zip(settlement_x_locations_by_color, settlement_y_locations_by_color):
        # Pick up settlements of a specific color
        for settlement_x, settlement_y in zip(settlement_x_locations, settlement_y_locations):
            move_to_coordinates(x=settlement_x, y=settlement_y, stepper_x=hat_x.stepper1, stepper_y=hat_y.stepper1)

            # Move Z-axis to the specified pick height
            move_z_axis_based_on_object(obj_type="settlement", stepper_z=hat_z.stepper1, target_height=z_pick)

            dc_motor.throttle = 1.0
            time.sleep(3)

            # Move to the determined settlement home location based on color
            move_to_home_location(color, "settlement", stepper_x=hat_x.stepper1, stepper_y=hat_y.stepper1)

            # Move Z-axis to home building height
            move_z_axis_based_on_object(obj_type="settlement", stepper_z=hat_z.stepper1, target_height="home_building")

            # Turn off the DC motor after placement
            dc_motor.throttle = 0.0

            time.sleep(2)  # Wait for 2 seconds before the next iteration

def pick_up_cities_by_color(city_x_locations_by_color, city_y_locations_by_color, z_pick, z_target, dc_motor):
    # Iterate over colors sequentially
    for color, city_x_locations, city_y_locations in zip(city_x_locations_by_color, city_y_locations_by_color):
        # Pick up cities of a specific color
        for city_x, city_y in zip(city_x_locations, city_y_locations):
            move_to_coordinates(x=city_x, y=city_y, stepper_x=hat_x.stepper1, stepper_y=hat_y.stepper1)

            # Move Z-axis to the specified pick height
            move_z_axis_based_on_object(obj_type="city", stepper_z=hat_z.stepper1, target_height=z_pick)

            dc_motor.throttle = 1.0
            time.sleep(3)

            # Move to the determined city home location based on color
            move_to_home_location(color, "city", stepper_x=hat_x.stepper1, stepper_y=hat_y.stepper1)

            # Move Z-axis to home building height
            move_z_axis_based_on_object(obj_type="city", stepper_z=hat_z.stepper1, target_height="home_building")

            # Turn off the DC motor after placement
            dc_motor.throttle = 0.0

            time.sleep(2)  # Wait for 2 seconds before the next iteration




def place_objects_at_set_locations(obj_type, set_location, stepper_z, dc_motor):
    # Move to the specified set location based on object type
    if set_location == "buildings_blue":
        move_to_coordinates(x=10, y=10, stepper_x=hat_x.stepper1, stepper
