# -*- coding: utf-8 -*-
"""
Created on Mon Feb 19 19:06:24 2024

@author: Owen Porpora
"""

import time
import RPi.GPIO as GPIO
from adafruit_motorkit import MotorKit
from adafruit_motor import stepper

# Vaccum Constants
pick_suck_time = 3.0
pick_blow_time = 0.5
place_blow_time = 1.0

# 0.2 mm per step
distance_per_step = 0.2

# Replace with the actual initial position
current_position_gripper_z = 0

# Setup GPIO mode
GATE_VALVE_Blow = 6
GATE_VALVE_Suck = 13 
GPIO.setmode(GPIO.BCM)
GPIO.setup(GATE_VALVE_Blow, GPIO.OUT)
GPIO.setup(GATE_VALVE_Suck, GPIO.OUT)

kit2 = MotorKit(address=0x61)

# Function to set the gate valve low
def set_gate_valve_blow():
    GPIO.output(GATE_VALVE_Blow, GPIO.LOW)
   
    print("Gate Valve state blow")

# Function to set the gate valve high
def set_gate_valve_suck():
    
    GPIO.output(GATE_VALVE_Blow, GPIO.HIGH)
    print("Gate Valve state Suck")

# Function to execute the place sequence
def pick(gamepiece):
    if gamepiece in ["num", "hex"]:
        set_gate_valve_suck()
        kit2.motor3.throttle = 1.0
        move_z_axis(gamepiece)
        time.sleep(0.1)
    elif gamepiece in ["settlement", "city", "road", "robber"]:
        set_gate_valve_blow()
        kit2.motor4.throttle = .75
        time.sleep(1.5)
        move_z_axis(gamepiece)
        kit2.motor4.throttle = 0
        set_gate_valve_suck()
        kit2.motor3.throttle = 1.0
        time.sleep(5)
    else:
        print("Invalid gamepiece type")

# Function to execute the place sequence
def place(gamepiece):
    if gamepiece in ["num", "hex"]:
        kit2.motor3.throttle = 0
        set_gate_valve_blow()
        kit2.motor4.throttle = 1.0
        time.sleep(0.2)
        kit2.motor4.throttle = 0
    elif gamepiece in ["settlement", "city", "road", "robber"]:
        kit2.motor3.throttle = 0
        set_gate_valve_blow()
        kit2.motor4.throttle = 1.0
        time.sleep(2)
        kit2.motor4.throttle = 0
        
# Function to move Z-axis to a specified position
def move_z_axis(gamepiece):
    global current_position_gripper_z
    print(f"Last Z Gripper position was at: {current_position_gripper_z} mm")

    # Define position mappings relative to home position
    gamepiece_mappings = {
        "settlement": -5,
        "city": -6,
        "road": -25,
        "robber": -8,
        "num": 18,
        "hex": 18,
        "midpoint": -9,
        "home": 0  # Adjust home position if necessary
    }

    if gamepiece in gamepiece_mappings:
        target_position = gamepiece_mappings[gamepiece]
        print(f"Moving Z-axis to {gamepiece} position")
        
        # Calculate target steps and direction
        target_steps = int(abs(target_position - current_position_gripper_z) / distance_per_step)
        direction = stepper.FORWARD if target_position > current_position_gripper_z else stepper.BACKWARD

        try:
            for i in range(target_steps):
                kit2.stepper1.onestep(direction=direction, style=stepper.DOUBLE)
                time.sleep(0.001)
            
            # Update current position
            current_position_gripper_z = target_position
            print(f"Z-axis moved to {gamepiece} position successfully.")
            
        except Exception as e:
            print(f"Error during motor movement: {e}")
            # Handle the error or exit the program
    else:
        print("Invalid input position")

#pick hex & num logic
pick("hex")
move_z_axis("home")
time.sleep(3)
move_z_axis("hex")
place("hex")
move_z_axis("home")

#pick everything else logic
#pick("road")
#move_z_axis("home")
#time.sleep(3)
#move_z_axis("midpoint")
#place("road")
#move_z_axis("home")

#gate vale testing 
#set_gate_valve_blow()
#kit2.motor3.throttle =1
#time.sleep(5)
#kit2.motor3.throttle = 0

