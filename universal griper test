# -*- coding: utf-8 -*-
"""
Created on Mon Jan 29 17:11:20 2024

@author: Owen Porpora
"""
import RPi.GPIO as GPIO
from adafruit_motorkit import MotorKit
import time
import board

# Create the MotorKit object, specifying the I2C bus
kit = MotorKit(i2c=board.I2C())

# Set the GPIO pin for the gate valve
GATE_VALVE_PIN = 16

def set_gate_valve_low():
    GPIO.output(GATE_VALVE_PIN, GPIO.LOW)
    print("Gate Valve state low")

def set_gate_valve_high():
    GPIO.output(GATE_VALVE_PIN, GPIO.HIGH)
    print("Gate Valve state high")

def run_motor_with_timeout(motor, throttle, duration, action):
    motor.throttle = throttle
    start_time = time.time()
    print(f"{action} has begun at {time.strftime('%H:%M:%S', time.localtime(start_time))}")
    time.sleep(duration)
    motor.throttle = 0
    end_time = time.time()
    print(f"{action} has finished at {time.strftime('%H:%M:%S', time.localtime(end_time))}. Elapsed time: {end_time - start_time:.2f} seconds")

def pick(blow_motor, suck_motor, blow_time, suck_time, pick_time):
    set_gate_valve_low()
    run_motor_with_timeout(blow_motor, 1, blow_time, "Blowing")
    set_gate_valve_high()
    run_motor_with_timeout(suck_motor, 1, suck_time, "Sucking")
    time.sleep(pick_time)

try:
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(GATE_VALVE_PIN, GPIO.OUT)

    #Time values
    blow_time = 1.0   # Blow time in seconds
    suck_time = 3.0   # Suck time in seconds
    pick_time = 10.0  # Pick time in seconds

    # Run the sequence once
    pick(kit.motor_M1, kit.motor_M1, blow_time, suck_time, pick_time)
    
finally:
    # Clean up GPIO
    GPIO.cleanup()

    # Turn off the motors in case of an exception
    kit.motor_M1.throttle = 0


