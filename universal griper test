import time
import RPi.GPIO as GPIO
from adafruit_motorkit import MotorKit
from adafruit_motor import stepper

# Replace with the actual initial position
current_position_gripper_z = 0

# 0.2 mm per step
distance_per_step = 0.2

# Vaccum Constants
pick_suck_time = 0.2
pick_blow_time = 0.1
place_blow_time = 1.0

# Setup GPIO mode
GATE_VALVE_PIN = 17  # Replace this with the actual GPIO pin number
GPIO.setmode(GPIO.BCM)
GPIO.setup(GATE_VALVE_PIN, GPIO.OUT)


kit2 = MotorKit(address=0x61)

# Function to set the gate valve low
def set_gate_valve_low():
    GPIO.output(GATE_VALVE_PIN, GPIO.LOW)
    print("Gate Valve state low")

# Function to set the gate valve high
def set_gate_valve_high():
    GPIO.output(GATE_VALVE_PIN, GPIO.HIGH)
    print("Gate Valve state high")

# Function to execute the pick sequence
def pick():
    set_gate_valve_high()
    kit2.motor3.throttle = 1.0
    time.sleep(pick_blow_time)
    set_gate_valve_low()
    kit2.motor3.throttle = 1.0
    time.sleep(pick_suck_time)
    kit2.motor3.throttle = 0

# Function to execute the place sequence
def place():
    set_gate_valve_high()
    kit2.motor3.throttle = 1.0
    time.sleep(place_blow_time)
    kit2.motor3.throttle = 0

# Function to move Z-axis to a specified position
def move_z_axis(position):
    global current_position_gripper_z
    print(f"Last z Gripper position was location: {current_position_gripper_z} mm")

    target_distance_top = 15 - current_position_gripper_z
    target_distance_bottom = -15 - current_position_gripper_z

    if position == "down":
        print("Moving Z-axis down")
        target_steps = int(abs(target_distance_top) / distance_per_step)
        direction = stepper.BACKWARD  # Adjust as needed
    else:
        print("Moving Z-axis up")
        target_steps = int(abs(target_distance_bottom) / distance_per_step)
        direction = stepper.FORWARD  # Adjust as needed

    try:
        for i in range(target_steps):
            kit2.stepper1.onestep(direction=direction, style=stepper.DOUBLE)  # Adjust style as needed
            time.sleep(0.001)
    except Exception as e:
        print(f"Error during motor movement: {e}")
        # Handle the error or exit the program

    current_position_gripper_z += target_distance_top if position == "down" else target_distance_bottom
    print(f"New Gripper position at: {current_position_gripper_z} mm")

# Execute the sequence
move_z_axis("down")
pick()
move_z_axis("up")
place()
