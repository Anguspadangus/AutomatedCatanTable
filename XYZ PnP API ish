import time
import RPi.GPIO as GPIO
from adafruit_motorkit import MotorKit
from adafruit_motor import stepper

# Place Constants
track_end_x = 1000
track_end_y = 800
track_end_z = 20
track_start_x = 0
track_start_y = 0
track_start_z = 0
home_position_x = 0
home_position_y = 0
home_z = 0
place_x = 100
place_y = 50
current_position_gantry_x = {'x': home_position_x}
current_position_gantry_y = {'y': home_position_y}
current_position_z = home_z

# 0.2 mm per step
distance_per_step = 0.2

# Vaccum Constants
blow_time = 0.1
suck_time = 0.2

# Setup GPIO mode
GATE_VALVE_PIN = 17  # Replace this with the actual GPIO pin number
GPIO.setmode(GPIO.BCM)
GPIO.setup(GATE_VALVE_PIN, GPIO.OUT)

# Initialize MotorKit
kit1 = MotorKit()
kit2 = MotorKit(address=0x61)

# Function to set the gate valve low
def set_gate_valve_low():
    GPIO.output(GATE_VALVE_PIN, GPIO.LOW)
    print("Gate Valve state low")

# Function to set the gate valve high
def set_gate_valve_high():
    GPIO.output(GATE_VALVE_PIN, GPIO.HIGH)
    print("Gate Valve state high")

# Function to execute the pick sequence
# def pick():

# Function to execute the place sequence
# def place():

# Function to move Z-axis to a specified position
# def move_z_axis():

# Function to move XY-axis to a specified position Simultaneously
def move_xy_axis(x_cord, y_cord):
    global current_position_gantry_x
    global current_position_gantry_y
    
    print(f"Last X position was location: {current_position_gantry_x['x']} mm")
    print(f"Last Y position was location: {current_position_gantry_y['y']} mm")
    
    target_distance_x = x_cord - current_position_gantry_x['x']
    target_distance_y = y_cord - current_position_gantry_y['y']

    target_steps_x = int(abs(target_distance_x) / distance_per_step)
    target_steps_y = int(abs(target_distance_y) / distance_per_step)
        
    print(f"delta X to move to new position: {target_distance_x} mm")
    print(f"delta Y to move to new position: {target_distance_y} mm")
    
    if target_distance_x > 0:
        direction_1 = stepper.BACKWARD  # come back and switch
    else:
        direction_1 = stepper.FORWARD
        
    if target_distance_y > 0:
        direction_2 = stepper.BACKWARD
    else:
        direction_2 = stepper.FORWARD
        
    target_steps_x = abs(int(target_steps_x))
    target_steps_y = abs(int(target_steps_y))
    
    # Move both X and Y axis motors simultaneously
    try:
        for i in range(max(target_steps_x, target_steps_y)):
            if i <= target_steps_x:
                kit1.stepper1.onestep(direction=direction_1, style=stepper.DOUBLE)
            if i <= target_steps_y:
                kit1.stepper2.onestep(direction=direction_2, style=stepper.DOUBLE)
            time.sleep(0.001)
    except Exception as e:
        print(f"Error during motor movement: {e}")
        # Handle the error or exit the program
   
    current_position_gantry_x['x'] = x_cord
    current_position_gantry_y['y'] = y_cord
   
    print(f"New position at: {x_cord} mm")
    print(f"New position at: {y_cord} mm")
    

# Input lists of absolute positions for X and Y
positions_list_x = input("Enter a list of X positions (comma-separated) in millimeters: ").split(',')
positions_list_y = input("Enter a list of Y positions (comma-separated) in millimeters: ").split(',')

# Check if the input lists have the same length
if len(positions_list_x) != len(positions_list_y):
    print("Error: X and Y position lists must have the same length.")
else:
    # Convert string values to integers
    positions_list_x = [int(position_x) for position_x in positions_list_x]
    positions_list_y = [int(position_y) for position_y in positions_list_y]

    # Move to each position in the lists sequentially
    for x_cord, y_cord in zip(positions_list_x, positions_list_y):
        move_xy_axis(x_cord, y_cord)
        time.sleep(2)  # Wait for 2 seconds between movements
    move_xy_axis(0, 0)
