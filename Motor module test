# -*- coding: utf-8 -*-
"""
Created on Tue Jan 23 18:20:04 2024

@author: Owen Porpora
"""

import time
import board
from adafruit_motorkit import MotorKit
from adafruit_motor import stepper

# Input distance (positive or negative)
x_new = int(input("Enter distance in millimeters: "))

# Constants
step_angle = 1.8          # Step angle in degrees
distance_per_step = 0.2   # Distance moved per step in mm

# Total distance the gantry can move (replace with actual total distance)
total_distance = 100

# Total steps in one rotation of the stepper motor (replace with actual total steps)
total_steps = 200

# Current position of the gantry
current_position = {'x': 0}


# Initialize MotorKit
kit = MotorKit(i2c=board.I2C())

# Function to move to a specific (x, y) coordinate
def move_to(x):
    global current_position

    # Calculate the relative movement required for the X axis
    x_distance = x - current_position['x']
    print("The change of distance is", x_distance)

    # Calculate the number of steps required to move to the new position
    x_steps = int((x_distance / total_distance))

    # Move the X axis motor
    if x_distance > 0:
        # Move forward
        for i in range(abs(x_steps)):
            kit.stepper2.onestep(direction=stepper.FORWARD, style=stepper.SINGLE)
            time.sleep(0.01)
    elif x_distance < 0:
        # Move backward
        for j in range(abs(x_steps)):
            kit.stepper2.onestep(direction=stepper.BACKWARD, style=stepper.SINGLE)
            time.sleep(0.01)
    else:
        print("Input distance should be non-zero.")

    # Update the current position
    current_position['x'] = x

    # Wait for the motor to complete its movement
    while kit.stepper2.is_busy:
        time.sleep(0.1)

# Assuming kit.stepper2 is the motor you want to control
move_to(x_new)

