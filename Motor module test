# -*- coding: utf-8 -*-
"""
Created on Mon Jan 22 22:34:27 2024

@author: Owen Porpora
"""
import time
import board
from adafruit_motorkit import MotorKit
from adafruit_motor import stepper
#POSTIVE MOTOR INPUTS GO TOWARDS THE CINCY FLAG
# Input distance (positive or negative)
new_x = int(input("Enter distance in millimeters: "))

# Constants
track_length = 1000
start_track = 0  
distance_per_step = 0.2  # Distance moved per step in mm

# Load current position from file
try:
    with open("current_position.txt", "r") as file:
        current_position = {'x': int(file.read())}
except FileNotFoundError:
    current_position = {'x': 0}

# Initialize MotorKit
kit = MotorKit(i2c=board.I2C())
    
# Function to move to a specific (x, y) coordinate
def move_to(new_x):
    global current_position
    print(f"Last X position: {current_position['x']} mm")

    # Calculate the relative movement required for X
    x_distance = new_x - current_position['x']
    
    print(f"delta X: {x_distance} mm")

    # Calculate the number of steps required for X
    x_steps = int(abs(x_distance) / distance_per_step)

    # Move both X and Y motors simultaneously
    if x_distance > 0:
        # Move forward
        for i in range(x_steps):
            kit.stepper2.onestep(direction=stepper.FORWARD, style=stepper.DOUBLE)  
            time.sleep(0.0001)
    elif x_distance < 0:
        # Move backward
        for j in range(x_steps):
            kit.stepper2.onestep(direction=stepper.BACKWARD, style=stepper.DOUBLE)
            time.sleep(0.0001)
    else:
        print("Delta X is zero, no need to move")
        
    # Update the current position
    current_position['x'] += x_distance
    print(f"updated X position: {current_position['x']} mm")

    # Save current position to file
    with open("current_position.txt", "w") as file:
        file.write(str(current_position['x']))

# Call the function with the user-input
move_to(new_x)

